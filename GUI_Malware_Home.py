from tkinter import *
from tkinter import ttk
import time
import xlsxwriter
from datetime import date
import sys
import os
from os import listdir
from os.path import isfile, join

import xlrd
from tkinter import filedialog
from tkinter import messagebox
import tkinter.messagebox

import math
from collections import Counter
import pandas as pd
import numpy as np
import numpy
import random


from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
import pickle
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, HashingVectorizer
from sklearn.datasets import make_classification
from sklearn import metrics
from sklearn.ensemble import RandomForestClassifier
import sys
from time import sleep

import urllib.request as urllib2, json
# from Thingspeak import myAPI,baseURL,READ_API_KEY,CHANNEL_ID,conn

import matplotlib.pyplot as plt


from sklearn.metrics import confusion_matrix
import itertools

from GUI_Malware_Register import lbl1


def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Reds):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    # print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.ylabel('TRUE CLASS')
    plt.xlabel('PREDICTED CLASS')
    plt.tight_layout()


seed = 7
numpy.random.seed(seed)

import argparse

window = Tk()
window.title("PROJECT NAME")
window.geometry('600x300')

tab_control = ttk.Notebook(window)
tab2 = ttk.Frame(tab_control)
tab_control.add(tab2, text='LOGIN')


#############################################################################################################################################################


def RST():
    messagebox.showerror('CLOSE', 'CLOSE')
    window.quit()
    window.destroy()




def ARUNMODEL1():
    KK = np.loadtxt('aa.txt')
    if KK[0] == 1:
        # Importing the dataset
        dataset = pd.read_csv('MALW1.csv')
        X = dataset.iloc[:, :-1].values
        y = dataset.iloc[:, -1].values
        print('INPUT SIZE:', np.shape(X))
        print('TARGET SIZE', np.shape(y))

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=21)
        print('TRAIN DATA', np.shape(X_train))
        print('TARGET DATA', np.shape(y_train))
        classifier = RandomForestClassifier(max_depth=2, random_state=0)
        classifier.fit(X, y)

    else:
        lbl1.configure(text='ACCESS DENIED')


def ARUNMODEL2():
    KK = np.loadtxt('aa.txt')
    if KK[0] == 1:
        lbl2.configure(text='TESTING--')
        dataset = pd.read_csv('MALW1.csv')
        print(dataset.head())
        X = dataset.iloc[:, :-1].values
        y = dataset.iloc[:, -1].values
        print('INPUT SIZE:', np.shape(X))
        print('TARGET SIZE', np.shape(y))

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=21)
        print('TRAIN DATA', np.shape(X_train))
        print('TARGET DATA', np.shape(y_train))

        # MODELING AND TESTING:

        file = open("RF.obj", 'rb')
        classifier = pickle.load(file)
        file.close()
        score = classifier.score(X_test, y_test)
        print(score)

        print('----------------------------------------\n')
        print('--------------RESULT--------------------\n')
        print('ACCURACY IS :', score)

        y_pred = classifier.predict(X_test)
        # Compute confusion matrix
        cnf_matrix = confusion_matrix(y_test, y_pred)
        np.set_printoptions(precision=2)

        # Plot normalized confusion matrix
        plt.figure()
        plot_confusion_matrix(cnf_matrix[0:2, 0:2], classes=['MALWARE', 'NORMAL'], normalize=True,
                              title='Proposed Method')
        plt.show()

    else:
        lbl1.configure(text='ACCESS DENIED')


#############################################################################################################################################################
lbl = Label(tab2, text="TEST", font=("Arial Bold", 30), foreground=("red"), background=("white"))
lbl.grid(column=0, row=0)
lbl = Label(tab2, text="PANEL", font=("Arial Bold", 30), foreground=("red"), background=("white"))
lbl.grid(column=1, row=0)

lbl2 = Label(tab2, text="  STATUS   ", font=("Arial Bold", 10), foreground=("black"), background=("white"))
lbl2.grid(column=1, row=5)

Button(tab2, text='TRAIN', command=ARUNMODEL1, font=("Arial Bold", 15), foreground=("yellow"),
       background=("brown")).grid(row=1, column=1, sticky=W, pady=4)
Button(tab2, text='TEST', command=ARUNMODEL2, font=("Arial Bold", 15), foreground=("yellow"),
       background=("brown")).grid(row=2, column=1, sticky=W, pady=4)
Button(tab2, text='CANCEL', command=RST, font=("Arial Bold", 15), foreground=("yellow"), background=("brown")).grid(
    row=3, column=1, sticky=W, pady=4)

#############################################################################################################################################################
tab_control.pack(expand=1, fill='both')
window.mainloop()
